import telebot
import requests
import os
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ API
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_LINK = os.getenv("TELEGRAM_CHANNEL_LINK")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHANNEL_LINK or not DEEPSEEK_API_KEY:
    print("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")
    exit(1)

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞
TELEGRAM_CHANNEL_USERNAME = TELEGRAM_CHANNEL_LINK.split("/")[-1]

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_history = {}

def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        chat_member = bot.get_chat_member(f"@{TELEGRAM_CHANNEL_USERNAME}", user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def ask_deepseek(user_id, prompt):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É DeepSeek API —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}

    if user_id not in user_history:
        user_history[user_id] = []

    user_history[user_id].append({"role": "user", "content": prompt})
    user_history[user_id] = user_history[user_id][-10:]

    data = {
        "model": "deepseek-chat",
        "messages": user_history[user_id],
        "temperature": 0.4
    }

    try:
        response = requests.post(url, json=data, headers=headers, timeout=60)
        response.raise_for_status()
        response_json = response.json()

        if "choices" in response_json and response_json["choices"]:
            ai_response = response_json["choices"][0]["message"]["content"]
        else:
            ai_response = "‚ö† DeepSeek –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç."

        user_history[user_id].append({"role": "assistant", "content": ai_response})
        return ai_response

    except requests.exceptions.Timeout:
        return "‚ö† DeepSeek API –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except requests.exceptions.HTTPError as e:
        return f"‚ö† –û—à–∏–±–∫–∞ API: {response.status_code} {response.text}"
    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

@bot.message_handler(func=lambda message: True)
def chat_with_ai(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    user_id = message.chat.id
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message.text}")

    if check_subscription(user_id):
        bot.send_chat_action(user_id, "typing")
        response = ask_deepseek(user_id, message.text)
        print(f"–û—Ç–≤–µ—Ç –æ—Ç –ò–ò: {response}")
        bot.send_message(user_id, response)
    else:
        bot.send_message(user_id, f'‚ö† –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: <a href="{TELEGRAM_CHANNEL_LINK}">NEWS_GLG</a>', parse_mode="HTML")

# üöÄ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            time.sleep(5)
